# Циклы
# for используется для перебора элементов в оследовательности, например, списка, строки, кортежа

cities = ["Moscow", "London", "Tokyo"]
for city in cities:
    print(city)

numbers = [1, 2, 3, 4, 5]
for number in numbers:
    print(number)

# Перебор чисел в диапазоне, например, от 1 до 10. Последнее значение (10) не включается в диапазон!
for i in range(2, 10):
    print(i)

# while. Выполняет блок кода до тех пор, пока условие истинно.
j = 10
while j >= 0:
    print(j)
    j -= 1

# break. Досрочно завершить выполнение цикла
for k in range(20, 30):
    if k == 22:
        break
    print(k)  # Выводит числа 20, 21. Когда = 22, завершает выполнение цикла.

# continue. Пропускает оставшиеся инструкции в текущей итерации циккла и переходит к следующей итерации
for p in range(1, 10):
    if p % 2 == 0:
        continue
    print(p)  # Выводит нечетные числа: 1, 3, 5, 7, 9

# pass. Используется как заглушка. Он ничего не делает и применяется там, где требуется синтаксически корректный блок кода, который пока не реализован.
for x in range(1, 5):
    if x == 3:
        pass  # Заглушка
    else:
        print(x)  # Выводит 1, 2, 4


# ПРИМЕРЫ

value = int(input("Enter a number: "))
if value % 2 == 0:
    print("Четное число")
else:
    print("Нечетное число")


for num in range(2, 20):
    is_prime = True
    for i in range(2, num):
        if num % i == 0:
            is_prime = False
            break
    if is_prime:
        print(num, "простое число")

# Запрос числа у пользователя
num = int(input("Enter a number: "))

# Инициализация переменных
factorial = 1  # Переменная для хранения результата факториала
i = 1  # Счетчик цикла

# Цикл для вычисления факториала
while i <= num:
    factorial *= i  # Умножаем текущее значение факториала на счетчик i
    i += 1  # Увеличиваем счетчик на 1

# Вывод результата
print("Факториал числа", num, "равен", factorial)